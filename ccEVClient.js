// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/urijs.js";
import http from "k6/http";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");

postman[Symbol.for("initial")]({
  options,
  collection: {
    domain: "https://portal-qa.mac-non-prod.appmanteam.com",
    // --- qa ---
    baseUrl:
      "https://portal-qa.mac-non-prod.appmanteam.com/api/v1/background-check",
    apiKey: "NDE2ZjNhYzMtYzlhYy00YWYwLWI1MjQtZjE3ZDkwYzMzOTU0",
    privateKey: "NDE2ZjNhYzMtYzlhYy00YWYwLWI1MjQtZjE3ZDkwYzMzOTU0",

    // --- local ---
    // baseUrl: "https://e4ef-161-82-160-194.ngrok-free.app",
    // apiKey: "NDcxODViMTItYTRmNC00NWY0LTkwYmItNzFkMzYzNzRlZjM0",
    // privateKey: "NDcxODViMTItYTRmNC00NWY0LTkwYmItNzFkMzYzNzRlZjM0",

    publicKey: "",
    apiKeyId: "",
    backgroundCheckId: "",
  },
});

const httpFile = (name) =>
  http.file(
    open(`./files/${name}`, "b"),
    name,
    name.includes(".png") ? "image/png" : "image/jpeg"
  );

const frontIdCardImage = httpFile("frontidcard.png");
const faceImage = httpFile("faceimage.png");
const frontIdcardFaceimage = httpFile("frontidcardfaceimage.png");
const signatureImage = httpFile("signature1.png");
const idCardSelfieImage = httpFile("idcardselfieimage.png");

export default function() {
  postman[Request]({
    name: "/backgroundChecks",
    id: "55fb4f38-e5cd-402f-9fef-ff68e3803b31",
    method: "POST",
    address: "{{baseUrl}}/backgroundChecks",
    data: {
      processConfigs: JSON.stringify({
        criminalRecord: true,
        socialSecurityHistory: true,
        bankruptcy: true,
        adverseMedia: false,
        sanction: false,
      }),
      verificationInfo: JSON.stringify({
        citizenId: "1111111111119",
        titleTH: "น.ส.",
        firstNameTH: "เม",
        lastNameTH: "เทสข้อมูลเยอะๆ",
        titleEN: "Miss",
        firstNameEN: "May",
        lastNameEN: "Mon",
        baseSalary: "2",
        dateOfBirth: "1999-12-25",
        dateOfCardExpiry: "2050-12-24",
        position: {
          translations: { th: { label: "เดป" }, en: { label: "DEV" } },
        },
        department: {
          translations: {
            th: { label: "MAC Team" },
            en: { label: "MAC Team" },
          },
        },
      }),
    },
    post(response) {
      pm.test("Create bgc success", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
        if (jsonData.id)
          pm.collectionVariables.set("backgroundCheckId", jsonData.id);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("apiKey")}`;
    },
  });

  postman[Request]({
    name: "/backgroundChecks/:id (verificationInfo)",
    id: "fb94eee3-70fb-4c8b-adda-b5af58d6e485",
    method: "PATCH",
    address: "{{baseUrl}}/backgroundChecks/{{backgroundCheckId}}",
    data: {
      frontIdCardImage,
      idCardFaceImage: frontIdcardFaceimage,
      livenessImage: faceImage,
      // verificationInfo: '{"kycCompletedAt": "{{$isoTimestamp}}"}',
      verificationInfo: '{"kycVerified": true}',
    },
    post(response) {
      pm.test("Patch kyc result success", function() {
        pm.response.to.have.status(200);

        var jsonData = JSON.parse(responseBody);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("apiKey")}`;
    },
  });

  postman[Request]({
    name: "/backgroundChecks/:id",
    id: "ccb82da7-167d-4475-84c6-6184297e68eb",
    method: "GET",
    address: "{{baseUrl}}/backgroundChecks/{{backgroundCheckId}}",
    post(response) {
      pm.test("Get by id success", function() {
        pm.response.to.have.status(200);

        var jsonData = JSON.parse(responseBody);

        const resultIdKeys = [
          "criminalRecordId",
          "socialSecurityHistoryId",
          "adverseMediaId",
          "bankruptcyId",
          "sanctionId",
          "educationId",
          "incomeId",
          "employmentReferenceId",
        ];

        resultIdKeys.forEach((key) => {
          if (jsonData[key]) pm.collectionVariables.set(key, jsonData[key]);
        });
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("apiKey")}`;
    },
  });

  postman[Request]({
    name: "/criminalRecords (upload idCardSelfieImage)",
    id: "83c36b8e-ced3-4dc1-8504-5cc89e884a30",
    method: "PUT",
    address:
      "{{baseUrl}}/backgroundChecks/{{backgroundCheckId}}/criminalRecords",
    data: {
      idCardSelfieImage,
    },
    post(response) {
      pm.test("upload idCardSelfieImage success", function() {
        pm.response.to.have.status(200);

        var jsonData = JSON.parse(responseBody);
        if (jsonData.id)
          pm.collectionVariables.set("criminalRecordId", jsonData.id);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("apiKey")}`;
    },
  });

  postman[Request]({
    name: "/criminalRecords (additionalInfo)",
    id: "0c2ee1c5-b361-4595-84c9-25631c35a741",
    method: "PUT",
    address:
      "{{baseUrl}}/backgroundChecks/{{backgroundCheckId}}/criminalRecords",
    data: {
      additionalInfo: JSON.stringify({
        fatherTitle: "นาย",
        fatherFirstName: "ชื่อบิดา",
        fatherLastName: "นามสกุลบิดา",
        motherTitle: "นาง",
        motherFirstName: "ชื่อมารดา",
        motherLastName: "นามสกุลมารดา",
        phoneNumber: "0999999999",
        address: {
          residentNo: "1",
          moo: "2",
          soi: "ลาดพร้าว 3",
          road: "ลาดพร้าว",
          subDistrict: "บ้านระกาศ",
          district: "บางบ่อ",
          province: "สมุทรปราการ",
        },
      }),
    },
    post(response) {
      pm.test("add additionalInfo success", function() {
        pm.response.to.have.status(200);

        var jsonData = JSON.parse(responseBody);
        if (jsonData.id)
          pm.collectionVariables.set("criminalRecordId", jsonData.id);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("apiKey")}`;
    },
  });

  postman[Request]({
    name: "/criminalRecords (upload signature)",
    id: "64da9633-e93b-4ecd-bb5b-1ec92b5a9c3c",
    method: "PUT",
    address:
      "{{baseUrl}}/backgroundChecks/{{backgroundCheckId}}/criminalRecords",
    data: {
      file: signatureImage,
    },
    post(response) {
      pm.test("upload CC signature success", function() {
        pm.response.to.have.status(200);

        var jsonData = JSON.parse(responseBody);
        if (jsonData.id)
          pm.collectionVariables.set("criminalRecordId", jsonData.id);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("apiKey")}`;
    },
  });

  postman[Request]({
    name: "/socialSecurityHistories (upload signature)",
    id: "1669c209-e7eb-4ac9-85d5-d2a8b9e6b723",
    method: "PUT",
    address:
      "{{baseUrl}}/backgroundChecks/{{backgroundCheckId}}/socialSecurityHistories",
    data: {
      file: signatureImage,
    },
    post(response) {
      pm.test("upload EV signature success", function() {
        pm.response.to.have.status(200);

        var jsonData = JSON.parse(responseBody);
        if (jsonData.id)
          pm.collectionVariables.set("criminalRecordId", jsonData.id);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("apiKey")}`;
    },
  });

  postman[Request]({
    name: "/criminalRecords (clientSubmitted)",
    id: "91090307-91f8-488b-b9da-3368c001e968",
    method: "PATCH",
    address:
      "{{baseUrl}}/backgroundChecks/{{backgroundCheckId}}/criminalRecords",
    data: JSON.stringify({ clientSubmitted: true }),
    headers: { "Content-Type": "application/json" },
    post(response) {
      pm.test("patch CC clientSubmitted success", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("apiKey")}`;
    },
  });

  postman[Request]({
    name: "/socialSecurityHistories (clientSubmitted)",
    id: "ebdea35e-4d0d-4f5d-ac72-1b889da2ceb7",
    method: "PATCH",
    address:
      "{{baseUrl}}/backgroundChecks/{{backgroundCheckId}}/socialSecurityHistories",
    data: JSON.stringify({ clientSubmitted: true }),
    headers: { "Content-Type": "application/json" },
    post(response) {
      pm.test("patch EV clientSubmitted success", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("apiKey")}`;
    },
  });
}
